from dotenv import load_dotenv
import os
import sys
import pandas as pd
import requests
import re

# Load the environment variables
load_dotenv()
api_key = os.getenv("API_KEY_VT")


# URL to check the IP from AbusedIPDB
url = f"https://www.virustotal.com/api/v3/ip_addresses/"
"""
ip = "37.19.212.39"
headers = {
        "x-apikey": api_key
}
response = requests.get(url+ip, headers=headers)
data = response.json()  
print(data["data"]["attributes"]["whois"]) 
"""

def check_ip(ip):
    # Headers to send to the API
    headers = {
        "x-apikey": api_key
    }
    
    try:
        # Call the API to check the IP
        response = requests.get(url+ip, headers=headers)
        data = response.json()     
        
        # Get the data from the response and check if any of the data is not in the response
        score = data["data"]["attributes"]["last_analysis_stats"]["malicious"] if not None else "No data available"
        country = data["data"]["attributes"]["country"] if not None else "No data available"
        as_owner = data["data"]["attributes"]["as_owner"] if not None else "No data available"
        whois = re.search(r"(\d+\.\d+\.\d+\.\d+)\s*-\s*(\d+\.\d+\.\d+\.\d+)", data["data"]["attributes"]["whois"])
        if whois is not None:
            whois = whois.group()
        
        results = [
            score, 
            country, 
            as_owner, 
            whois
        ]

        return results
    except Exception as e:
        print(f"An error occured: {e}")
        return
    
def check_ips(data):
    # Get the name of the first column 
    first_column = data.columns[0]

    # Apply function to every element in the column 
    # Use lambda (anonymous function) to pass the value to the function (check_ip), create a temp df, and then add the columns to the original df  
    data[["VT Flagged Score", "Country", "Where", "IP Range"]] = data[first_column].apply(lambda x: pd.Series(check_ip(x)))

    return data

def read_csv(file):
    try:
        # Read the file and return the data (only read the first column and use the first row as header)
        data = pd.read_csv(file, header=0)
        return data
    except FileNotFoundError:
        print("File not found. Please check the path and try again.")
        return
    except Exception as e:
        print(f"An error occured: {e}")
        return
    
def write_csv(data, file):
    try:
        # Write the data to the file
        data.to_csv("results.csv", index=False)
        print("File written successfully.")
    except Exception as e:
        print(f"An error occured: {e}")
        return
    

def main():
    # Check if the correct number of arguments is passed
    if len(sys.argv) != 2:
        print("Use: python3 vtip.py <file.csv>")
    else:
        # Argument in position 1 is the file to read
        file = sys.argv[1]

        # Call the function to read the file
        data = read_csv(file)

        # Create a copy of the data to later compare if the ips were successfully checked
        temp = data.copy()

        # If the data is not None, call the function to check the IPs
        if data is not None:
            print("File read successfully...")
            print("Checking IPs...")
            data = check_ips(data)
        
        # If the data is not None and the data is different from temp (the ips were checked correctly), call the function to write the data to a file
        if data is not None and not data.equals(temp):
            print("IPs checked successfully...")
            write_csv(data, file)
            print(data)
            print("Process completed.")
        else:
            print("An error occured. The file was not written.")
            print("Process failed.")


if __name__ == "__main__":
    main()
